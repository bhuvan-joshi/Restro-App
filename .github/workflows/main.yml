name: Deploy RESTRO-APP to IIS

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed

jobs:
  build:
    if: github.event.action != 'closed'  # Build only if PR is not closed
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: ./client
        run: npm install --force

      - name: Build Frontend
        working-directory: ./client
        run: npm run build

      - name: Install Backend Dependencies
        run: npm install

  deploy:
    if: github.event.pull_request.merged == true  # ✅ Only run if PR was merged
    runs-on: self-hosted
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Frontend build
      - name: Install Frontend Dependencies
        working-directory: ./client
        run: |
          npm install --force
          npx update-browserslist-db@latest

      - name: Build Frontend
        working-directory: ./client
        shell: cmd  # Explicitly use CMD for Windows runner
        run: |
          set CI=false
          set DISABLE_ESLINT_PLUGIN=true
          npm run build

      # Backend setup (if needed)
      - name: Install Backend Dependencies
        run: npm install

      # Deploy both frontend and backend
      - name: Deploy to IIS folder
        shell: powershell
        run: |
          $destination = "C:\inetpub\wwwroot\RestroApp"

          # Take ownership and set permissions
          takeown /F $destination /R /D Y | Out-Null
          icacls $destination /grant "$($env:USERNAME):(OI)(CI)F" /T | Out-Null

          # Clear destination folder (but keep the ReactApp folder itself)
          Get-ChildItem "$destination" -Exclude "data" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

          # Ensure the 'client' directory exists in the destination
          $clientDestination = "$destination\client"
          if (-Not (Test-Path $clientDestination)) {
              New-Item -ItemType Directory -Path $clientDestination | Out-Null
          }

          # Copy the build folder from client to the destination
          Copy-Item "client\build" "$clientDestination\build" -Recurse -Force

          # Copy the backend's 'node_modules' folder to a separate folder (e.g., node_modules_backend)
          $nodeModulesBackendDestination = "$destination"
          if (-Not (Test-Path $nodeModulesBackendDestination)) {
              New-Item -ItemType Directory -Path $nodeModulesBackendDestination | Out-Null
          }
          Copy-Item "node_modules" "$nodeModulesBackendDestination" -Recurse -Force

          # Copy backend files to the destination, excluding 'client' and 'node_modules'
          Get-ChildItem -Path "." -Exclude "client", ".git", ".github", "node_modules" | ForEach-Object {
              $source = $_.FullName
              $destinationPath = Join-Path $destination $_.Name
              Copy-Item $source -Destination $destinationPath -Recurse -Force
          }

          Write-Output "✅ Deployment Complete!"