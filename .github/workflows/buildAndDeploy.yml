name: Build and Deploy

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - develop

jobs:
  validate:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    # React Validation
    - name: Setup Node.js
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Test React
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      run: |
        npm install
        npm run build
    # .NET Validation  
    - name: Setup .NET
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Test API
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      working-directory: ChattyWidgetBackend
      run: |
        dotnet restore
        dotnet build
  deploy:
    if: github.event_name == 'push'
    runs-on: self-hosted
    needs: validate

    steps:
    - uses: actions/checkout@v4

    # React Deployment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Build React (dist)
      run: |
        npm install
        npm run build
        npm test
    - name: Deploy React to C:\inetpub\wwwroot\ChartWidget
      shell: powershell
      run: |
        $reactDest = "C:\inetpub\wwwroot\ChartWidget"
        if (-not (Test-Path $reactDest)) { New-Item -ItemType Directory -Path $reactDest -Force }
        Remove-Item "$reactDest\*" -Recurse -Force -ErrorAction SilentlyContinue
        Copy-Item -Path "./dist/*" -Destination $reactDest -Recurse -Force
        Write-Host "React dist/ deployed to $reactDest"
    # .NET Deployment
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Deploy API to C:\inetpub\wwwroot\ChattyWidgetAPI
      shell: powershell
      run: |
        $apiDest = "C:\inetpub\wwwroot\ChattyWidgetAPI"
        dotnet publish ChattyWidgetBackend --configuration Release --output $apiDest
        Write-Host "API deployed to $apiDest"
    - name: Verify Deployments
      shell: powershell
      run: |
        Write-Host "Deployment Verification:"
        Write-Host "React: $(if (Test-Path 'C:\inetpub\wwwroot\ChartWidget\index.html') { 'Found' } else { 'Missing' })"
        Write-Host "API: $(if (Get-ChildItem 'C:\inetpub\wwwroot\ChattyWidgetAPI\*.dll' -ErrorAction SilentlyContinue) { 'Found' } else { 'Missing' })"