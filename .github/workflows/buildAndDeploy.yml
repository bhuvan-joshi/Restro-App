name: Build and Deploy

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - develop

jobs:
  validate:
    if: github.event_name == 'pull_request'  # Only for pull request events
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    # React Validation
    - name: Setup Node.js
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Test React
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      run: |
        npm install
        npm run build
    # .NET Validation  
    - name: Setup .NET
      if: startsWith(github.event_name, 'pull_request') || github.event_name == 'push'
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Test API
      run: |
        dotnet restore ChattyWidgetBackend/ChattyWidget.API/ChattyWidget.API.csproj
        dotnet build ChattyWidgetBackend/ChattyWidget.API/ChattyWidget.API.csproj
      
  deploy:
    if: github.event_name == 'push'
    runs-on: self-hosted
    needs: validate

    steps:
    - uses: actions/checkout@v4

    # React Deployment
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Build React (dist)
      run: |
        npm install
        npm run build
    - name: Deploy React to C:\inetpub\wwwroot\ChartWidget
      shell: powershell
      run: |
        $reactDest = "C:\inetpub\wwwroot\ChartWidget"
        Write-Output "Running as: $env:USERNAME"
        Write-Output "Is Admin? $([bool]([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))"

        # 1. Permission Handling (only if needed)
        try {
            if (-not (Test-Path $reactDest)) {
                New-Item -ItemType Directory -Path $reactDest | Out-Null
            }
            
            # Alternative permission approach
            $acl = Get-Acl $reactDest
            $rule = New-Object System.Security.AccessControl.FileSystemAccessRule(
                $env:USERNAME,
                "Modify",
                "ContainerInherit,ObjectInherit",
                "None",
                "Allow"
            )
            $acl.SetAccessRule($rule)
            Set-Acl -Path $reactDest -AclObject $acl
            Write-Host "Permissions granted to NETWORK SERVICE on $reactDest"
        }
        catch {
            Write-Output "Permission setting failed: $_"
        }

        if (-not (Test-Path $reactDest)) { New-Item -ItemType Directory -Path $reactDest -Force }
        Remove-Item "$reactDest\*" -Recurse -Force -ErrorAction SilentlyContinue
        Copy-Item -Path "./dist/*" -Destination $reactDest -Recurse -Force
        Write-Host "React dist/ deployed to $reactDest"
    # .NET Deployment
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Deploy API to C:\inetpub\wwwroot\ChattyWidgetAPI
      shell: powershell
      run: |
        $apiDest = "C:\inetpub\wwwroot\ChattyWidgetAPI"
        Write-Output "Running as: $env:USERNAME"
        Write-Output "Is Admin? $([bool]([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))"

        # 1. Permission Handling (only if needed)
        try {
            if (-not (Test-Path $apiDest)) {
                New-Item -ItemType Directory -Path $apiDest | Out-Null
            }
            
            # Alternative permission approach
            $acl = Get-Acl $apiDest
            $rule = New-Object System.Security.AccessControl.FileSystemAccessRule(
                $env:USERNAME,
                "Modify",
                "ContainerInherit,ObjectInherit",
                "None",
                "Allow"
            )
            $acl.SetAccessRule($rule)
            Set-Acl -Path $reactDest -AclObject $acl
            Write-Host "Permissions granted to NETWORK SERVICE on $apiDest"
        }
        catch {
            Write-Output "Permission setting failed: $_"
        }
            
        dotnet publish ChattyWidgetBackend/ChattyWidget.API/ChattyWidget.API.csproj --configuration Release --output $apiDest
        Write-Host "API deployed to $apiDest"
    - name: Verify Deployments
      shell: powershell
      run: |
        Write-Host "Deployment Verification:"
        Write-Host "React: $(if (Test-Path 'C:\inetpub\wwwroot\ChartWidget\index.html') { 'Found' } else { 'Missing' })"
        Write-Host "API: $(if (Get-ChildItem 'C:\inetpub\wwwroot\ChattyWidgetAPI\*.dll' -ErrorAction SilentlyContinue) { 'Found' } else { 'Missing' })"